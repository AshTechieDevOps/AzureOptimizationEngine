{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "017ba09e-f6c5-496e-bc96-b7cfc09cf561",
            "version": "KqlParameterItem/1.0",
            "name": "CostTimeRange",
            "label": "Cost Time Range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 2592000000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "85603c03-1d4b-474b-9cdb-9ba97192fc9e",
            "version": "KqlParameterItem/1.0",
            "name": "InstanceMinCost",
            "label": "Min. instance cost",
            "type": 1,
            "description": "The minimum cost to be considered for an instance to be reported",
            "isRequired": true,
            "value": "50",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "^[1-9][0-9]*$",
                  "match": true,
                  "message": "Must be an integer greater than 0"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "5cf46ddd-b223-4333-a025-65c79eb7ee78",
            "version": "KqlParameterItem/1.0",
            "name": "GrowthPercentage",
            "label": "Growth (%)",
            "type": 1,
            "description": "Cost growth from start to end date",
            "isRequired": true,
            "value": "10",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "^[1-9][0-9]*$",
                  "match": true,
                  "message": "Must be an integer greater than 0"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let CostStartIndex = 1;\r\nlet SubscriptionSeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by SubscriptionGuid_g, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by SubscriptionGuid_g\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nlet ResourceGroupSeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by ResourceGroupName_s, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by ResourceGroupName_s\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nlet ResourceSeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by InstanceId_s, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by InstanceId_s\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nlet MeterCategorySeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by MeterCategory_s, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by MeterCategory_s\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nlet MeterSubCategorySeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by MeterSubCategory_s, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by MeterSubCategory_s\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nlet MeterNameSeries = materialize(AzureOptimization_BillingV2_CL\r\n| where UsageDate_t > datetime('{CostTimeRange:startISO}')\r\n| summarize InstanceCost = sum(todouble(Cost_s)) by MeterName_s, UsageDate_t\r\n| order by UsageDate_t\r\n| make-series Cost=sum(InstanceCost) on UsageDate_t in range(startofday(datetime('{CostTimeRange:startISO}')), endofday(ago(6d)), 1d) by MeterName_s\r\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\r\n| where StartCost > 0 and EndCost > {InstanceMinCost} and EndCost > (StartCost * {GrowthPercentage}));\r\nSubscriptionSeries\r\n| extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n| mvexpand outliers, UsageDate_t\r\n| summarize arg_max(todatetime(UsageDate_t), *) by SubscriptionGuid_g\r\n| where outliers == 1\r\n| extend SeriesType='Outliers', PerspectiveType = 'SubscriptionGuid_g', PerspectiveId = SubscriptionGuid_g\r\n| distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n| union (\r\n    SubscriptionSeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'SubscriptionGuid_g', PerspectiveId = SubscriptionGuid_g\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union ( \r\n    ResourceGroupSeries\r\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n    | mvexpand outliers, UsageDate_t\r\n    | summarize arg_max(todatetime(UsageDate_t), *) by ResourceGroupName_s\r\n    | where outliers == 1\r\n    | extend SeriesType='Outliers', PerspectiveType = 'ResourceGroupName_s', PerspectiveId = ResourceGroupName_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union (\r\n    ResourceGroupSeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'ResourceGroupName_s', PerspectiveId = ResourceGroupName_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union ( \r\n    ResourceSeries\r\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n    | mvexpand outliers, UsageDate_t\r\n    | summarize arg_max(todatetime(UsageDate_t), *) by InstanceId_s\r\n    | where outliers == 1\r\n    | extend SeriesType='Outliers', PerspectiveType = 'InstanceId_s', PerspectiveId = InstanceId_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union (\r\n    ResourceSeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'InstanceId_s', PerspectiveId = InstanceId_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union ( \r\n    MeterCategorySeries\r\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n    | mvexpand outliers, UsageDate_t\r\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterCategory_s\r\n    | where outliers == 1\r\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterCategory_s', PerspectiveId = MeterCategory_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union (\r\n    MeterCategorySeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'MeterCategory_s', PerspectiveId = MeterCategory_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union ( \r\n    MeterSubCategorySeries\r\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n    | mvexpand outliers, UsageDate_t\r\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterSubCategory_s\r\n    | where outliers == 1\r\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterSubCategory_s', PerspectiveId = MeterSubCategory_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union (\r\n    MeterSubCategorySeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'MeterSubCategory_s', PerspectiveId = MeterSubCategory_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union ( \r\n    MeterNameSeries\r\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\r\n    | mvexpand outliers, UsageDate_t\r\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterName_s\r\n    | where outliers == 1\r\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterName_s', PerspectiveId = MeterName_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)\r\n| union (\r\n    MeterNameSeries\r\n    | extend SeriesType='Growing', PerspectiveType = 'MeterName_s', PerspectiveId = MeterName_s\r\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\r\n)",
        "size": 1,
        "title": "Growing and Outliers",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "CostTimeRange",
        "exportedParameters": [
          {
            "fieldName": "PerspectiveType",
            "parameterName": "SelectedPerspective",
            "parameterType": 1
          },
          {
            "fieldName": "PerspectiveId",
            "parameterName": "SelectedPerspectiveId",
            "parameterType": 1
          }
        ],
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "GrowingAndOutliers"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureOptimization_BillingV2_CL\r\n| where {SelectedPerspective} in ('{SelectedPerspectiveId}') and UsageDate_t > datetime('{CostTimeRange:startISO}') and ChargeType_s == 'Usage'\r\n| summarize sum(todouble(Cost_s)) by bin(UsageDate_t, 1d), {SelectedPerspective}\r\n| render timechart",
        "size": 0,
        "title": "Evolution over time",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "CostTimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "outliers"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}